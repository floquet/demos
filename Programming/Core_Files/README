Examples of three core file viewers:

Instructions:

Copy "compile", "mpi_test.f90", "run_script.pbs" to your $WORKDIR.

Compile the binary using either the command line, or execute the "compile"
script.  "compile" sets an environment variable to use the Gnu Fortran
compiler gfortran.
To use the Intel compilers, comment out the Gnu compiler lines and the "exit"
statement, and uncomment the Intel compiler lines.

Note: gnu does not work well with code generated by the Intel compilers.
      However, Totalview appears to work better with Intel-generated binaries.

Edit "run_script.pbs" to place your project id after #PBS -A.  Note the command
setting the limit on core file size to "unlimited".  In csh, the command is
"limit", whereas in bash, it is "ulimit".  The default on Topaz is to generate
core files of size 0 bytes, that is, do not generate them.

Submit the job to Topaz using "qsub run_script.pbs".  A core file should
result in the job execution directory, against which you can apply totalviewcli,
totalview, or gdb. Run the debugger on the login node, or in an interactive
session on one of the compute nodes.


Description:
 
1. TOTALVIEWCLI  TotalView command line viewer
#  Load the TotalView module
 module load totalview

#  Usage:
##             executable  corefile
 totalviewcli  mpi_test    core

#  Watch as totalviewcli loads the core files. It will tell you which thread(s) 
#  had problems.

#  Useful commands

dfocus 1.1        (totalviewcli said 1.1 had problems in this example - focus
                   on 1.1)
dwhere            (totalviewcli reports which line of code had problem - look
                   for a string of the form pathname/code.f90#NN. NN is the
                   line number at which the error occurred.)
dlist             (totalviewcli prints out lines of code, above and below
                   problem.  The problem line is flagged with ">".)
dprint x          (print out the value of variable x.  Examine the values of
                   the loop indices and the divisor y.)
help              prints a list of topics
q                 (quit - "help" at the cli prompt will show other commands
                   for totalviewcli.  To really quit, enter "y" or "yes" at
                   the question mark.)


2. TOTALVIEW GUI
#  Load the TotalView module
  module load totalview

#  Usage:
##          executable  corefile
  totalview  mpi_test    core

#  A GUI should appear titled "mpi_test" with several panes showing data of
#  various sorts, a great deal of it in hexadecimal.  The upper left hand
#  pane, titled "Stack Trace" should show the main program and callees in
#  which the error occurred.  Here, it should say "mpitest" as the function
#  with the problem.

#  The upper right hand pane, titled "Stack Frame", should display the values
#  of the variables when the error occurred, and the values on the processor's
#  registers.  Note the values of j (= 47) and y (= 0).

#  The central pane should display the operation that was occurring at the
#  time, in this case, a division operation, highlighted with a yellow arrow.
#  Movement of the display bar should show the line of the code at which
#  the operation occurred, in this case, line 31.

#  There should be a row of GUI operation buttons below the title bar, and
#  immediately below that two rows stating process and thread with the
#  specific error, in this case, a Floating Point Exception.

#  So TotalView is saying that on line 31, the value of y = 0 gave rise to
#  a floating point exception in a division operation, that is, a floating
#  point division by zero.


3. GDB  GNU DEBUGGER

#  Usage:
##     executable  corefile 
% gdb  mpi_test   core

#  Useful commands,  and there is "help"

bt                (backtrace)
print <variable>  (value of variable)
list              (list program)
q                 (quit)
help              (help list)
help "command"

# gdb on Topaz is verbose and may tell you the specific error (arithmetic
# exception) and print the specific executable line (25) on which it occurred.

